package main

import (
	"bytes"
	"crypto/sha256"
	"strconv"
	"time"
)

//区块的头部信息包括Timestamp,PrevBlockHash,Hash
type Block struct {
	Timestamp     int64	//区块被创建的时间
	Data          []byte //区块价值信息(Transaction)
	PrevBlockHash []byte 
	Hash          []byte
}

//关联区块中各字段并在此基础上计算SHA-56Hash
func (b *Block) SetHash() {
	timestamp := []byte(strconv.FormatInt(b.Timestamp, 10))
	headers := bytes.Join([][]byte{b.PrevBlockHash, b.Data, timestamp}, []byte{})
	hash := sha256.Sum256(headers)

	b.Hash = hash[:]
}


func NewBlock(data string, prevBlockHash []byte) *Block {
	block := &Block{time.Now().Unix(), []byte(data), prevBlockHash, []byte{}}
	block.SetHash()
	return block
}

//创世区块即链上的第一个区块
func NewGenesisBlock() *Block {
	return NewBlock("Genesis Block", []byte{})
}





package main

//区块链是后序周游链表的数据结构
type Blockchain struct {
	blocks []*Block
}

//在区块中存储区块价值信息并创建新区块
func (bc *Blockchain) AddBlock(data string) {
	prevBlock := bc.blocks[len(bc.blocks)-1]
	newBlock := NewBlock(data, prevBlock.Hash)
	bc.blocks = append(bc.blocks, newBlock)
}


func NewBlockchain() *Blockchain {
	return &Blockchain{[]*Block{NewGenesisBlock()}}
}




package main

import (
	"fmt"
)

func main() {
	bc := NewBlockchain()

	bc.AddBlock("send 1 ETH to MACF")
	bc.AddBlock("Send 2 more ETH to MACF")

	for _, block := range bc.blocks {
		fmt.Printf("Prev. hash: %x\n", block.PrevBlockHash)
		fmt.Printf("Data: %s\n", block.Data)
		fmt.Printf("Hash: %x\n", block.Hash)
		fmt.Println()
	}
}









